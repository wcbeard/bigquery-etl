-- Query generated by: templates/clients_daily_histogram_aggregates.sql.py
WITH extracted AS (
  SELECT
    *,
    DATE(submission_timestamp) AS submission_date,
    client_info.client_id,
    REPLACE(ping_info.ping_type, "_", "-") AS ping_type,
    COALESCE(
      SAFE_CAST(SPLIT(client_info.app_display_version, '.')[OFFSET(0)] AS INT64),
      0
    ) AS app_version,
    client_info.os AS os,
    client_info.app_build AS app_build_id,
    client_info.app_channel AS channel
  FROM
    `moz-fx-data-shared-prod.{{ source_table }}`
  WHERE
    DATE(submission_timestamp) = {{ submission_date }}
    AND client_info.app_channel IN ("release", "fenixProduction")
    AND client_info.client_id IS NOT NULL
),
histograms AS (
  SELECT
    {{ attributes }},
    ARRAY<
      STRUCT<
        metric STRING,
        metric_type STRING,
        sum INT64,
        value ARRAY<STRUCT<key STRING, value INT64>>
      >
    >[{{ histograms }}] AS metadata
  FROM
    extracted
),
flattened_histograms AS (
  SELECT
    {{ attributes }},
    metadata.*
  FROM
    histograms,
    UNNEST(metadata) as metadata
  WHERE
    value IS NOT NULL
),
-- Aggregate the true sum of values before they are quantized for recording.
-- This is done separately from the actual distributions.
aggregated_sum AS (
  SELECT
    {{ attributes }},
    metric,
    metric_type,
    SUM(sum) AS sum,
  FROM
    flattened_histograms
  GROUP BY
    {{ attributes }},
    metric,
    metric_type
),
aggregated_histograms_unnested AS (
  SELECT
    {{ attributes }},
    metric,
    metric_type,
    value.key,
    SUM(value.value) as value
  FROM
    flattened_histograms,
    UNNEST(value) as value
  GROUP BY
    {{ attributes }},
    metric,
    metric_type,
    key
),
aggregated_histograms AS (
  SELECT
    * EXCEPT(key, value),
    ARRAY_AGG(STRUCT<key INT64, value INT64>(CAST(key as INT64), value)) as value
  FROM
    aggregated_histograms_unnested
  GROUP BY
    {{ attributes }},
    metric,
    metric_type
),
aggregated as (
  SELECT *
  FROM aggregated_sum
  JOIN aggregated_histograms
  USING ({{ attributes }}, metric, metric_type)
)
SELECT
  {{ attributes }},
  ARRAY_AGG(
    STRUCT<
      metric STRING,
      metric_type STRING,
      key STRING,
      agg_type STRING,
      sum INT64,
      value ARRAY<STRUCT<key INT64, value INT64>>
    >(metric, metric_type, '', 'summed_histogram', sum, value)
  ) AS histogram_aggregates
FROM
  aggregated
GROUP BY
  {{ attributes }}
